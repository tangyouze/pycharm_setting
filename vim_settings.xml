<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Dropbox/code/quantlib/acc_rpc.py" timestamp="1462599450512">
        <mark key="'" line="89" column="29" />
        <mark key="[" line="131" column="70" />
        <mark key="]" line="131" column="69" />
        <mark key="." line="131" column="69" />
        <mark key="^" line="131" column="69" />
      </file>
      <file name="/Python Console" timestamp="1462368447786">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-rpc-xtc/xtc_model.py" timestamp="1462588670353">
        <mark key="'" line="106" column="25" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" timestamp="1462589389142">
        <mark key="'" line="16" column="69" />
        <mark key="[" line="12" column="63" />
        <mark key="]" line="16" column="69" />
        <mark key="." line="16" column="69" />
        <mark key="^" line="16" column="69" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/quantlib/interface.py" timestamp="1462583581509">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="9" column="23" />
      </file>
      <file name="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/strategy_mm.py" timestamp="1462536076286">
        <mark key="'" line="23" column="26" />
        <mark key="[" line="53" column="8" />
        <mark key="]" line="53" column="13" />
        <mark key="^" line="53" column="13" />
        <mark key="." line="53" column="13" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/__init__.py" timestamp="1462339888051">
        <mark key="'" line="24" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/quantlib/tasks/daemon/read_redis_queue_save_influxdb.py" timestamp="1462322667294">
        <mark key="[" line="55" column="0" />
        <mark key="]" line="55" column="0" />
        <mark key="." line="55" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/quantlib/btc/test_okcoin.py" timestamp="1462582601294">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/requirements.txt" timestamp="1462588698724">
        <mark key="[" line="12" column="8" />
        <mark key="]" line="13" column="5" />
        <mark key="^" line="13" column="5" />
        <mark key="." line="13" column="5" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/exps.py" timestamp="1462587839442">
        <mark key="'" line="17" column="31" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" timestamp="1462583387442">
        <mark key="'" line="419" column="0" />
        <mark key="[" line="961" column="37" />
        <mark key="]" line="961" column="37" />
        <mark key="." line="961" column="37" />
        <mark key="^" line="961" column="37" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/setup.py" timestamp="1462588710925">
        <mark key="[" line="12" column="30" />
        <mark key="]" line="13" column="9" />
        <mark key="^" line="13" column="9" />
        <mark key="." line="13" column="9" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/quantlib/Makefile" timestamp="1462535511761">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="5" column="118" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-strategy-cn-mm/Makefile" timestamp="1462670047876">
        <mark key="'" line="2" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/util.py" timestamp="1462624845656">
        <mark key="[" line="634" column="0" />
        <mark key="]" line="634" column="0" />
        <mark key="^" line="649" column="15" />
        <mark key="." line="634" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-strategy-cn-mm/strategy.py" timestamp="1462508862307">
        <mark key="'" line="198" column="17" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-strategy-turtle/Makefile" timestamp="1462533803804">
        <mark key="[" line="5" column="76" />
        <mark key="]" line="5" column="81" />
        <mark key="." line="5" column="81" />
        <mark key="^" line="5" column="81" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" timestamp="1462623890195">
        <mark key="'" line="984" column="16" />
        <mark key="[" line="662" column="20" />
        <mark key="]" line="662" column="44" />
        <mark key="." line="662" column="44" />
        <mark key="^" line="662" column="44" />
      </file>
      <file name="/" timestamp="1462534975399">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" timestamp="1462588646728">
        <mark key="'" line="245" column="19" />
        <mark key="[" line="907" column="55" />
        <mark key="]" line="907" column="78" />
        <mark key="^" line="907" column="78" />
        <mark key="." line="907" column="78" />
      </file>
      <file name="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/config.yaml" timestamp="1462534799483">
        <mark key="'" line="8" column="8" />
        <mark key="[" line="7" column="14" />
        <mark key="]" line="7" column="17" />
        <mark key="." line="7" column="17" />
        <mark key="^" line="7" column="17" />
      </file>
      <file name="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" timestamp="1462681577627">
        <mark key="'" line="1176" column="45" />
        <mark key="[" line="2815" column="7" />
        <mark key="]" line="2816" column="31" />
        <mark key="." line="2816" column="31" />
        <mark key="^" line="2816" column="31" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin_quote.py" timestamp="1462367317953">
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="0" />
        <mark key="." line="27" column="0" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-strategy-turtle/strategy.py" timestamp="1462527112684">
        <mark key="'" line="886" column="8" />
      </file>
      <file name="$USER_HOME$/Dropbox/code/qb-okcoin/okcoin.py" timestamp="1462583468893">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="8" column="0" />
        <mark key="." line="8" column="0" />
      </file>
      <file name="$USER_HOME$/Anaconda3/Lib/site-packages/qbtrade-0.1.0-py3.5.egg/qbtrade/model.py" timestamp="1462600680014">
        <mark key="'" line="1035" column="8" />
        <mark key="[" line="948" column="0" />
        <mark key="]" line="948" column="0" />
        <mark key="." line="948" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="945" column="28" filename="$USER_HOME$/Dropbox/code/quantlib/guangfa.py" />
      <jump line="28" column="13" filename="$USER_HOME$/Dropbox/code/quantlib/guangfa.py" />
      <jump line="5" column="15" filename="$USER_HOME$/Dropbox/code/quantlib/huatai.py" />
      <jump line="902" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="393" column="52" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="5" column="0" filename="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/run.sh" />
      <jump line="59" column="54" filename="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/strategy_mm.py" />
      <jump line="35" column="39" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="389" column="33" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="844" column="28" filename="$USER_HOME$/Dropbox/code/quantlib/guangfa.py" />
      <jump line="479" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/huatai.py" />
      <jump line="682" column="4" filename="$USER_HOME$/Dropbox/code/quantlib/huatai.py" />
      <jump line="886" column="8" filename="$USER_HOME$/Dropbox/code/qb-strategy-turtle/strategy.py" />
      <jump line="2" column="0" filename="$USER_HOME$/Dropbox/code/qb-strategy-cn-mm/Makefile" />
      <jump line="113" column="50" filename="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/strategy_mm.py" />
      <jump line="11" column="28" filename="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/strategy_mm.py" />
      <jump line="8" column="8" filename="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/config.yaml" />
      <jump line="23" column="26" filename="$USER_HOME$/Dropbox/projects.win10/qb-okc-mm/strategy_mm.py" />
      <jump line="372" column="44" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="392" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="183" column="64" filename="$USER_HOME$/Dropbox/code/quantlib/acc_rpc.py" />
      <jump line="382" column="45" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="1820" column="25" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="376" column="33" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="379" column="20" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="1042" column="8" filename="$USER_HOME$/Anaconda3/Lib/site-packages/qbtrade-0.1.0-py3.5.egg/qbtrade/model.py" />
      <jump line="202" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="105" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/btc/test_okcoin.py" />
      <jump line="0" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/btc/test_okcoin.py" />
      <jump line="163" column="30" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="453" column="24" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="419" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/btc/okcoin.py" />
      <jump line="27" column="42" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/xtc_model.py" />
      <jump line="0" column="0" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/xtc_model.py" />
      <jump line="125" column="8" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/xtc_model.py" />
      <jump line="30" column="0" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="0" column="0" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="581" column="13" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="889" column="0" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="7" column="0" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="461" column="30" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="10" column="10" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="979" column="4" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="904" column="32" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="366" column="37" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="503" column="36" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="975" column="4" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="379" column="20" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="41" column="0" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="410" column="56" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="996" column="4" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="27" column="31" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="78" column="43" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/xtc_model.py" />
      <jump line="394" column="46" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="984" column="29" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="646" column="50" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="915" column="12" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="15" column="10" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="18" column="8" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="17" column="31" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/exps.py" />
      <jump line="170" column="40" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="9" column="43" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="171" column="0" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="359" column="68" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="173" column="23" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="176" column="0" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="12" column="32" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="194" column="17" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="245" column="19" filename="$USER_HOME$/Dropbox/code/qbtrade/qbtrade/model.py" />
      <jump line="97" column="32" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="106" column="25" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/xtc_model.py" />
      <jump line="589" column="0" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="6" column="7" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="0" column="0" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="197" column="8" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="31" column="20" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="182" column="20" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="195" column="8" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="16" column="69" filename="$USER_HOME$/Dropbox/code/qbtrade/bin/acc_rpc.py" />
      <jump line="822" column="12" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="438" column="39" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="415" column="91" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="963" column="16" filename="$USER_HOME$/Dropbox/code/qb-rpc-xtc/okcoin.py" />
      <jump line="26" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/acc_rpc.py" />
      <jump line="94" column="16" filename="$USER_HOME$/Dropbox/code/quantlib/acc_rpc.py" />
      <jump line="11" column="0" filename="$USER_HOME$/Dropbox/code/quantlib/acc_rpc.py" />
      <jump line="91" column="29" filename="$USER_HOME$/Dropbox/code/quantlib/acc_rpc.py" />
      <jump line="52" column="33" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="3930" column="10" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="3829" column="0" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="2521" column="8" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="3939" column="4" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="3546" column="4" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="3037" column="15" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="96" column="6" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="2984" column="26" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="0" column="0" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="3948" column="25" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="2645" column="20" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
      <jump line="1176" column="45" filename="$USER_HOME$/Dropbox/github/logentries/le/src/le.py" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="4">
        <text>handle exception</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxpcGFkZHJfYWxpaGsyXD4=</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICAgICAgcnRuID0gYXdhaXQgc2VsZi5mdXR1cmVfdHJhZGUobG9jYWxfc3ltYm9sPWxvY2FsX2Nvbi5sb2NhbF9zeW1ib2wsIHR0eXBlPXR0eXBlLCBwcmljZT1wcmljZSwgYW1vdW50PWFtb3VudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhY3RfdHlwZT1sb2NhbF9jb24uZGVsaXZlcnkpCg==</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">YXN5bmMgZGVmIGFzeW5jX2h0dHBfdHJ5KGZ1bmMsIHJldHJpZXM9MywgdGltZW91dD01LCBtZXRob2Q9J2pzb24nLCAqYXJncywgKiprd2FyZ3MpOgogICAgaSA9IDAK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">YXN5bmMgZGVmIGFzeW5jX2h0dHBfdHJ5KGZ1bmMsIHJldHJpZXM9MywgdGltZW91dD01LCBtZXRob2Q9J2pzb24nLCAqYXJncywgKiprd2FyZ3MpOgogICAgaSA9IDAK</text>
      </register>
      <register name="4" type="4">
        <text>handle exception</text>
      </register>
      <register name="5" type="4">
        <text>, seems not good</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAgICAgcnRuID0gYXdhaXQgc2VsZi5mdXR1cmVfdHJhZGUobG9jYWxfc3ltYm9sPWxvY2FsX2Nvbi5sb2NhbF9zeW1ib2wsIHR0eXBlPXR0eXBlLCBwcmljZT1wcmljZSwgYW1vdW50PWFtb3VudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhY3RfdHlwZT1sb2NhbF9jb24uZGVsaXZlcnkpCg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAgICAgdHR5cGUK</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIHJ0biA9IGF3YWl0IHNlbGYuZnV0dXJlX3RyYWRlKGxvY2FsX3N5bWJvbD1sb2NhbF9jb24ubG9jYWxfc3ltYm9sLCB0dHlwZT01IC0gdHR5cGUsIHByaWNlPXByaWNlLCBhbW91bnQ9YW1vdW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhY3RfdHlwZT1sb2NhbF9jb24uZGVsaXZlcnkpCg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIHJ0biA9IGF3YWl0IHNlbGYuZnV0dXJlX3RyYWRlKGxvY2FsX3N5bWJvbD1sb2NhbF9jb24ubG9jYWxfc3ltYm9sLCB0dHlwZT10dHlwZSwgcHJpY2U9cHJpY2UsIGFtb3VudD1hbW91bnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdF90eXBlPWxvY2FsX2Nvbi5kZWxpdmVyeSkK</text>
      </register>
      <register name=":" type="4">
        <text>action FindPrevious</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxpcGFkZHJfYWxpaGsyXD4=</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxpcGFkZHJfYWxpaGsyXD4=</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxpcGFkZHJfYWxpaGsyXD4=</entry>
      </history-search>
      <history-cmd>
        <entry>action HighlightUsagesInFile</entry>
        <entry>action FindNext</entry>
        <entry>action FindPrevious</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>